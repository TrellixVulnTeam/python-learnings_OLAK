# using dict()
my_dict = dict({1:'apple', 2:'ball'})

# from sequence having each item as a pair
my_dict = dict([(1,'apple'), (2,'ball')])

2.get()
------	

Key can be used either inside square brackets or with the get() method. 
The difference while using get() is that it returns None instead of KeyError, if the key is not found.

my_dict = {'name':'Ranjit', 'age': 26}

my_dict['address']
...
KeyError: 'address'

my_dict.get('address')


3. pop
-------
 squares = {1:1, 2:4, 3:9}
	squares.pop(2)
	4
>>> squares
{1: 1, 3: 9}


4.del
-----

 >>> del squares[3]
>>> squares
{1: 1}

5.Update
-------
	d1.update(d2)
	Updates d1.
	
	d1 = {1:1,2:4,3:9}
	d2 = {1:None,4:16}
	d1.update(d2)
	print(d1)
	
	{1: None, 2: 4, 3: 9, 4: 16}
	
6.Python Dictionary Comprehension
=================================

Dictionary comprehension consists of an expression pair (key: value) followed by for statement inside curly braces {}.

>>> squares = {x: x*x for x in range(6)}
>>> squares
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}

	This code is equivalent to :
			squares = {}
			for x in range(6):
				squares[x] = x*x
	
	
b. A dictionary comprehension can optionally contain more for or if statements. An optional if statement can filter out items to form the new dictionary. 
		odd_squares = {x: x*x for x in range(11) if x%2 == 1}
		>>> odd_squares
		{1: 1, 3: 9, 5: 25, 7: 49, 9: 81}
	
	
7. Dictionary Membership Test
----------------------------
	2 not in squares
	True
	7 in squares
	True
	
8.	
	