Iterators:
---------
https://docs.python.org/3.1/howto/functional.html


Benefit of using iterator?
Note that you can only go forward in an iterator; there�s no way to get the previous element, reset the iterator, or make a copy of it.


Iter to a Dictionery:
--------------------
Applying iter() to a dictionary always loops over the keys, but dictionaries have methods that return other iterators.
If you want to iterate over values or key/value pairs, you can explicitly call the values() or items() methods to get an appropriate iterator.

The dict() constructor can accept an iterator that returns a finite stream of (key, value) tuples:

>>> L = [('Italy', 'Rome'), ('France', 'Paris'), ('US', 'Washington DC')]
>>> dict(iter(L))
{'Italy': 'Rome', 'US': 'Washington DC', 'France': 'Paris'}


List comprehensions and generator expressions (short form: �listcomps� and �genexps�) are a concise notation for
such operations, borrowed from the functional programming language Haskell (http://www.haskell.org/).


line_list = ['  line 1\n', 'line 2  \n', ...]

# Generator expression -- returns iterator
stripped_iter = (line.strip() for line in line_list)

# List comprehension -- returns list
stripped_list = [line.strip() for line in line_list]