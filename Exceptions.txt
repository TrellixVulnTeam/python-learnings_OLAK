1. sys.exc_info() returns a tuple with three values (type, value, traceback).
----------------------------------------------------------------------------

Here type gets the exception type of the Exception being handled
value is the arguments that are being passed to constructor of exception class
traceback contains the stack information like where the exception occurred etc.
For Example, In the following program

try:

    a = 1/0

except Exception,e:

    exc_tuple = sys.exc_info()
Now If we print the tuple the values will be this.

exc_tuple[0] value will be "ZeroDivisionError"
exc_tuple[1] value will be "integer division or modulo by zero" (String passed as parameter to the exception class)
exc_tuple[2] value will be "trackback object at (some memory address)"
The above details can also be fetched by simply printing the exception in string format.


or

try:
    1/0
except:
    # http://docs.python.org/2/library/sys.html#sys.exc_info
    exc_type, exc_value, exc_traceback = sys.exc_info() # m
	
	
2. Use str(e):
-----------	
try:

except e:
	print str(e)


	
3. traceback Module
-------------------	

import traceback

Use traceback.extract_stack() if you want convenient access to module and function names and line numbers.


4. Raising Exceptions
--------------------
raise ValueError
Traceback (most recent call last):
  File "<input>", line 1, in <module>
ValueError


5. User Defined Exceptions:
--------------------------
a. Here, we have created a user-defined exception called CustomError which is derived from the Exception class.

b. When we are developing a large Python program, it is a good practice to place all the user-defined exceptions that our program raises in a separate file. 
Many standard modules do this. They define their exceptions separately as exceptions.py or errors.py

c. Most implementations declare a custom base class and derive others exception classes from this base class

Here class Error is a user-defined exception class which inherits the Exception class. 
This Error class acts as base class for other Userdefined exception classes in the program.
d. Example:
	
	
	# define Python user-defined exceptions
class Error(Exception):
   """Base class for other exceptions"""
   pass

class ValueTooSmallError(Error):
   """Raised when the input value is too small"""
   pass

class ValueTooLargeError(Error):
   """Raised when the input value is too large"""
   pass

# our main program
# user guesses a number until he/she gets it right

# you need to guess this number
number = 10

while True:
   try:
       i_num = int(input("Enter a number: "))
       if i_num < number:
           raise ValueTooSmallError
       elif i_num > number:
           raise ValueTooLargeError
       break
   except ValueTooSmallError:
       print("This value is too small, try again!")
       print()
   except ValueTooLargeError:
       print("This value is too large, try again!")
       print()

print("Congratulations! You guessed it correctly.")